apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-replica-config
  namespace: swifteats
data:
  postgresql.conf: |
    # Replica-specific settings
    hot_standby = on
    hot_standby_feedback = on
    max_standby_streaming_delay = 30s
    max_standby_archive_delay = 30s
    
    # Performance settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # Connection settings
    max_connections = 200
    listen_addresses = '*'
    
  recovery.conf: |
    standby_mode = 'on'
    primary_conninfo = 'host=postgres-primary-service port=5432 user=replicator password=replicator'
    primary_slot_name = 'replica_slot_1'
    trigger_file = '/tmp/postgresql.trigger'
    restore_command = 'cp /var/lib/postgresql/archive/%f %p'

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-replica-pvc
  namespace: swifteats
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: swifteats
  labels:
    app: postgres-replica
    role: replica
spec:
  serviceName: postgres-replica-service
  replicas: 2
  selector:
    matchLabels:
      app: postgres-replica
      role: replica
  template:
    metadata:
      labels:
        app: postgres-replica
        role: replica
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/zone
                operator: In
                values:
                - us-east-1b
                - us-east-1c
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - postgres-replica
            topologyKey: kubernetes.io/hostname
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - postgres-primary
            topologyKey: topology.kubernetes.io/zone
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: swifteats
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-primary-secret
              key: postgres-password
        - name: PGUSER
          value: postgres
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: postgres-archive
          mountPath: /var/lib/postgresql/archive
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -d swifteats
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres -d swifteats
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.11.1
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://postgres:postgres@localhost:5432/swifteats?sslmode=disable"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-replica-config
      - name: postgres-archive
        persistentVolumeClaim:
          claimName: postgres-archive-pvc
      initContainers:
      - name: postgres-replica-init
        image: postgres:15-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Wait for primary to be ready
          until pg_isready -h postgres-primary-service -p 5432 -U postgres; do
            echo "Waiting for primary database..."
            sleep 5
          done
          
          # Take base backup from primary
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            echo "Taking base backup from primary..."
            PGPASSWORD=replicator pg_basebackup -h postgres-primary-service -D /var/lib/postgresql/data -U replicator -v -P -W
            
            # Copy recovery configuration
            cp /etc/postgresql/recovery.conf /var/lib/postgresql/data/
            
            # Set proper permissions
            chown -R postgres:postgres /var/lib/postgresql/data
            chmod 700 /var/lib/postgresql/data
          fi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-primary-secret
              key: postgres-password
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-service
  namespace: swifteats
  labels:
    app: postgres-replica
    role: replica
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  - port: 9187
    targetPort: 9187
    name: metrics
  selector:
    app: postgres-replica
    role: replica

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-headless
  namespace: swifteats
  labels:
    app: postgres-replica
    role: replica
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres-replica
    role: replica

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-read-service
  namespace: swifteats
  labels:
    app: postgres
    role: read
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: postgres-replica
    role: replica
